/* global $, L, console, document, JSONEditor, setOps, omnivore, osmtogeojson */

// https://github.com/jdorn/json-editor
// https://github.com/leaflet-extras/leaflet-providers

// http://enable-cors.org/
// https://stackoverflow.com/questions/11281895/jquery-ajax-and-getjson-requests-hitting-access-control-allow-origin-issues

$(document).ready(init0);

function init0() {
    $.getJSON('config.json', init);
}

var G = {};

function switchView(v) {
    G.theMap.setView([v.lat, v.lng], v.zoom);
}

function switchProvider() {
    if ('baseLayer' in G && G.baseLayer) {
	G.theMap.removeLayer(G.baseLayer);
    }
    var tp = G.editor.getEditor('root.tile_provider').getValue();
    G.baseLayer = L.tileLayer.provider(tp).addTo(G.theMap);
}

function init(config) {
console.log(config);
    G.editor = new JSONEditor($('#config')[0], config);
    G.theMap = L.map('themap', {
	contextmenu: true,
	contextmenuWidth: 140,
    });
    rebuildMenu();

    switchView(config.startval.views[0]);
    switchProvider(config.startval.tile_provider);
    G.layerGroups = {};

    setTitle();
    reload('all');
    G.editor.watch('root.title', setTitle);
    G.editor.watch('root.tile_provider', switchProvider);
    console.log(G);
}

function rebuildMenu() {
    var M = G.theMap.contextmenu;
    M.removeAllItems();
    var items = [
	{ t: 'reload changed', c: function () { reload('changed'); } },
	{ t: 'reload all', c: function () { reload('all'); } },
	{ t: 'remember here', c: rememberHere },
	{ t: 'rebuild menu', c: rebuildMenu }
    ];
    items.forEach(function (i) { M.addItem({text: i.t, callback: i.c }); });
    M.addItem('-');
    G.editor.getEditor('root.views').getValue().forEach(function (v) {
	M.addItem({text: v.name,
	    callback: function () { switchView(v); }
	});
    });
}

function rememberHere() {
    var views = G.editor.getEditor('root.views');
    var c = G.theMap.getCenter();
console.log(c, ' but sorry, cannot add due to library issues.');
    views.setValue(views.getValue().push({
	"name": "new view",
	"zoom": G.theMap.getZoom(),
	"lng": c.lng,
	"lat": c.lat
    }));
}

function setTitle() {
    var title = G.editor.getEditor('root.title').getValue();
    $('title').html(title);
    $('h1').html(title);
}

function reload(which) {
    // $.getJSON('data/ex1.geojson', addLayerGroup);
    which = which || 'changed';
    var srcNew = {};
    G.editor.getEditor('root.sources').getValue().forEach(function (x) {
	srcNew[x.url] = x;
    });
    var oldURLs = Object.keys(G.layerGroups);
    var newURLs = Object.keys(srcNew);

    var toRemove, toAdd, toChange;
    if (which == 'changed') {
	toRemove = setOps.complement(oldURLs, newURLs);
	toAdd = setOps.complement(newURLs, oldURLs);
	toChange = setOps.intersection(oldURLs, newURLs).filter(function (x) {
	    return G.layerGroups[x].xtconfig.color != srcNew[x].color ||
		G.layerGroups[x].xtconfig.icon != srcNew[x].icon;
	});
    } else {
	toRemove = oldURLs;
	toAdd = newURLs;
	toChange = [];
    }
console.log('toRemove, toAdd, toChange:', toRemove, toAdd, toChange);
    toRemove.forEach(function (x) {
	G.theMap.removeLayer(G.layerGroups[x]);
	delete G.layerGroups[x];
	// G.theMap.removeLayer(G.layerGroups[sn.url]);
    });
    toAdd.forEach(function (x) {
	// https://stackoverflow.com/questions/26699377/how-to-add-additional-argument-to-getjson-callback-for-non-anonymous-function
        $.get(x, addLayerGroup.bind({ 'xtconfig': srcNew[x] }), 'text');
	// When jquery "intelligently" sees json or csv content,
	// it (1) refuses to load a local file (2) automatically
	// calls JSON.parse() for a remote json file.
	// So always treat data as 'text'. Do not let jquery get in the way.
    });
    toChange.forEach(function (x) {
	G.layerGroups[x].xtconfig = srcNew[x];
	updateAllMarkers(G.layerGroups[x]);
    });
}

function addLayerGroup(data) {
    // http://leafletjs.com/examples/geojson.html
    var cfg = this.xtconfig;
    console.log('adding layer ' + cfg.url);
    var fmt = cfg.format;
    if (fmt == 'by-extension') {
	fmt = cfg.url.match(/\.(\w+)$/)[1];
    }
    var LG;
    if (fmt == 'gpx') {
	LG = omnivore.gpx.parse(data);
    } else if (fmt == 'csv') {
	LG = omnivore.csv.parse(data);
    } else if (fmt == 'kml') {
	LG = omnivore.kml.parse(data);
    } else if (fmt == 'geojson') {
	data = JSON.parse(data);
	LG = L.geoJson('features' in data ? data.features : data);
    } else if (fmt == 'osm json') {
	LG = L.geoJson(osmtogeojson(JSON.parse(data)));
	// move subfields of .tags (e.g. .name) one level up,
	// so as to be compatible with markers generated by
	// omnivore.*.parse() or the default L.geojson()
	LG.getLayers().forEach(function (x) {
	    var p = x.feature.properties;
	    Object.keys(p.tags).forEach(function (t) {
		p[t] = p.tags[t];
	    });
	    delete p.tags;
	});
    } else {
	console.log('unknown format ' + fmt);
	LG = null;
    }
    if (! LG) {
	console.log('failed parsing "' + cfg.url + '"');
	return;
    }
    // we don't need deep copy here, do we?
//    LG.xtconfig = JSON.parse(JSON.stringify(cfg));
    LG.xtconfig = cfg;
    LG.addTo(G.theMap);
    updateAllMarkers(LG);
    G.layerGroups[cfg.url] = LG;
    console.log('Done reading ' + LG.prettyPrint() +
	'. (Now we have ' + Object.keys(G.theMap._layers).length +
	' layers)'
    );
}

function updateAllMarkers(LG) {
    var marker = L.AwesomeMarkers.icon({
        'icon': LG.xtconfig.icon || 'bookmark',
        'markerColor': LG.xtconfig.color || 'green'
    });
    LG.getLayers().forEach(function (x) {
	x.setIcon(marker);
	x.tooltip = L.tooltip({
	    target: x,
	    map: G.theMap,
	    html: x.printTags(),
	    padding: '4px 8px'
	});
    });
}

// mostly for debugging, except L.Marker.prototype.printTags

L.Marker.prototype.printTags = function () {
    var p = this.feature.properties;
    var s = '';
    Object.keys(p).forEach(function (x) {
	if (['desc', 'relations', 'meta'].indexOf(x) < 0 && p[x]) {
	    s += '<strong>' + x + '</strong>: ' + p[x] + '<br />';
	}
    });
    return s;
};

// add the prettyPrint() capability to several "Layer" classes
// goole "javascript prototype" for how to.
// also please 'grep L.Class.extend leaflet-src.js'
L.Marker.prototype.prettyPrint = function () {
    var p = this.feature.properties;
    return 'M[' + ('name' in p ? p.name : '?') + ']';
};

L.TileLayer.prototype.prettyPrint = function () {
    return 'T[' + this._url + ']';
};

L.LayerGroup.prototype.prettyPrint = function () {
    var s = '';
    var subL = this._layers;
    Object.keys(subL).forEach(function (x) {
	s += subL[x].prettyPrint() + '„ÄÅ';
    } );
    return 'G[' + shortName(this.xtconfig.url) + '] contains ' + s;
};

/* skeleton of original, non-OOP version
function prettyPrint(layer) {
    if ('_url' in layer) {
	return layer.prettyPrint();
    } else if ('_latlng' in layer) {
	return layer.prettyPrint();
    } else if ('_layers' in layer) {
	return layer.prettyPrint();
    } else {
	return '? unknown type of layer';
    }
}
*/

function shortName(url) {
    var m = url.match(/\/([^\/]*?)\.(\w+)$/);
    if (m) { return m[1]; }
    // https://stackoverflow.com/a/747845
    m = decodeURIComponent(url).match(/overpass.*?(\w+)\[(.*?)\]/);
    if (m) { return m[1] + '[' + m[2] + ']'; }
    return '?';
}

